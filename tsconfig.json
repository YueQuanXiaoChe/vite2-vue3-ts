{
  "compilerOptions": {
    /* target用于指定编译之后的版本目标 */
    "target": "esnext",
    /* 用来指定要使用的模块标准 */
    "module": "esnext",
    /* 用于选择模块解析策略，有'node'和'classic'两种类型' */
    "moduleResolution": "node",
    /* strict用于指定是否启动所有类型检查 */
    "strict": true,
    /* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */
    "jsx": "preserve",
    /* sourceMap用来指定编译时是否生成.map文件 */
    "sourceMap": true,
    "resolveJsonModule": true,
    /* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */
    "esModuleInterop": true,
    "isolatedModules": true,
    /* lib用于指定要包含在编译中的库文件 */
    "lib": ["esnext", "dom"],
    /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */
    "types": ["vite/client"],
    "noImplicitAny": false,
    /* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */
    "baseUrl": "./",
    /* 用于设置模块名称到基于baseUrl的路径映射 */
    "paths": {
      "@/*": ["src/*"]
    }
  },
  /*
   * include也可以指定要编译的路径列表，
   * 但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，
   * 比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件
   */
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "build/**/*.ts",
    "build/**/*.d.ts"
  ],
  /*
   * exclude表示要排除的、不编译的文件，它也可以指定一个列表，
   * 规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符
   */
  "exclude": ["node_modules"]
}
